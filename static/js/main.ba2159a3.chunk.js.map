{"version":3,"sources":["service.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","process","getClients","get","App","React","useState","clientList","setClientList","editing","setEditing","searchAddressError","setSearchAddressError","name","phone","birth_date","address","neighborhood","city","state","zip","complement","inputs","setInputs","modal","toggleModal","useEffect","then","response","data","formValidation","fields","validation","filter","field","length","handleChange","event","persist","target","value","deleteClient","uuid","window","confirm","delete","deleteClients","alert","Container","Jumbotron","className","onClick","scope","map","client","key","str","match","replace","formatPhoneNumber","split","reverse","join","editClient","Modal","show","onHide","backdrop","Header","closeButton","Title","Body","Form","onSubmit","preventDefault","input","put","post","postClients","Group","controlId","Label","Control","type","onChange","required","mask","cep","catch","error","status","Text","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ba2159a3.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: process.env.REACT_APP_API_URL\n});\n\nexport const getClients = () => instance.get(`/clients`);\nexport const postClients = data => instance.post(`/clients`, data);\nexport const putClients = (uuid, data) => instance.put(`/clients/${uuid}`, data);\nexport const deleteClients = uuid => instance.delete(`/clients/${uuid}`);\nexport const searchAddress = cep => instance.get(`/search-address/${cep}`);\n\n","import React from 'react';\nimport './App.css';\nimport {\n  Container,\n  Jumbotron,\n  Form,\n  Modal\n} from 'react-bootstrap';\nimport MaskedFormControl from 'react-bootstrap-maskedinput';\nimport {\n  getClients,\n  postClients,\n  putClients,\n  deleteClients,\n  searchAddress\n} from './service';\n\nconst App = () => {\n  const [clientList, setClientList] = React.useState([]);\n  const [editing, setEditing] = React.useState(false);\n  const [searchAddressError, setSearchAddressError] = React.useState('Preencha o CEP e vamos procurar seu endereço.');\n  const [inputs, setInputs] = React.useState({\n    name: '',\n    phone: '',\n    birth_date: '',\n    address: '',\n    neighborhood: '',\n    city: '',\n    state: '',\n    zip: '',\n    complement: ''\n  });\n  const [modal, toggleModal] = React.useState(false);\n\n  React.useEffect(() => {\n    getClients().then(response => setClientList(response.data));\n  }, []);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (formValidation(inputs) !== true) {\n      alert(`Os campos: ${inputs.map(input => input.key()).join(', ')}são obrigatórios`);\n    }\n\n    if (editing) {\n      putClients(inputs.uuid, inputs).then(response => {\n        alert('Cliente editado com sucesso');\n        toggleModal(false);\n        setEditing(false);\n        setInputs({\n          name: '',\n          phone: '',\n          birth_date: '',\n          address: '',\n          neighborhood: '',\n          city: '',\n          state: '',\n          zip: '',\n          complement: ''\n        });\n        getClients().then(response => setClientList(response.data));\n      });\n\n      return;\n    }\n\n    postClients(inputs).then(response => {\n      alert('Cliente cadastrado com sucesso');\n      toggleModal(false);\n      setInputs({\n        name: '',\n        phone: '',\n        birth_date: '',\n        address: '',\n        neighborhood: '',\n        city: '',\n        state: '',\n        zip: '',\n        complement: ''\n      });\n      getClients().then(response => setClientList(response.data));\n    });\n  };\n\n  const formValidation = fields => {\n    const required = [\n      'name',\n      'phone',\n      'birth_date',\n      'address',\n      'neighborhood',\n      'city',\n      'state',\n      'zip'\n    ];\n\n    const validation = required.filter(\n      field => fields[field] === null || fields[field] === ''\n    );\n\n    if (validation.length > 0) {\n      return validation;\n    }\n\n    return true;\n  };\n\n  const handleChange = event => {\n    event.persist();\n    setInputs(inputs => ({\n      ...inputs,\n      [event.target.name]: event.target.value\n    }));\n  };\n\n  const formatPhoneNumber = (str) => {\n    let cleaned = ('' + str).replace(/\\D/g, '');\n    let match = cleaned.match(/^(\\d{2})(\\d{5})(\\d{4})$/);\n    if (match) {\n      return '(' + match[1] + ') ' + match[2] + '-' + match[3]\n    };\n    return null\n  };\n\n  const editClient = client => {\n    client.birth_date = client.birth_date.split('/').reverse().join('-');\n    if (client.complement === null) {\n      client.complement = '';\n    }\n    setInputs(client);\n    setEditing(true);\n    toggleModal(true)\n  };\n\n  const deleteClient = (uuid, name) => {\n    if (window.confirm(`Deseja realmente excluir o usuário ${name}?`)) {\n      deleteClients(uuid).then(response => {\n        alert('Cliente excluído com sucesso');\n        getClients().then(response => setClientList(response.data));\n      });\n    }\n  };\n\n  const handleSearchAddress = event => {\n    event.persist();\n    if (event.target.value.replace(/\\D/g,'').length < 8) {\n      return null\n    }\n\n    searchAddress(event.target.value).then(response => {\n      setInputs(inputs => ({\n        ...inputs,\n        address: response.data.address,\n        neighborhood: response.data.neighborhood,\n        city: response.data.city,\n        state: response.data.state,\n        zip: response.data.zip\n      }));\n    }).catch(error => {\n      if (error.response.status === 404) {\n        setSearchAddressError(error.response.data.error);\n      }\n    });\n  };\n\n  return (\n    <Container>\n      <Jumbotron className=\"my-2 py-4\">\n        <h1>Loop Client</h1>\n        <br />\n        <button className=\"btn btn-primary\"\n          onClick={() => toggleModal(!modal)}>\n          Novo cliente\n        </button>\n      </Jumbotron>\n\n      <table className=\"table-consume table table-hover table-striped\">\n        <thead>\n          <tr>\n            <th scope=\"col\">Nome</th>\n            <th scope=\"col\">Telefone</th>\n            <th scope=\"col\">Data de nascimento</th>\n            <th scope=\"col\">Endereço</th>\n            <th scope=\"col\">Ações</th>\n          </tr>\n        </thead>\n        <tbody>\n          {clientList.map(client => (\n            <tr key={client.uuid}>\n              <td>{client.name}</td>\n              <td>{formatPhoneNumber(client.phone)}</td>\n              <td>{client.birth_date}</td>\n              <td>{`${client.address} - ${client.neighborhood}, ${client.city} - ${client.state}, ${client.zip}`}</td>\n              <td>\n                <button className=\"btn btn-primary btn-sm mx-2\"\n                  onClick={() => editClient(client)}>\n                  Editar cliente\n                </button>\n                <button className=\"btn btn-danger btn-sm mx-2\"\n                  onClick={() => deleteClient(client.uuid, client.name)}>\n                  Excluir cliente\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      <Modal\n        show={modal}\n        onHide={() => toggleModal(false)}\n        backdrop=\"static\"\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>Cadastro de cliente</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Form onSubmit={handleSubmit}>\n            <Form.Group controlId=\"userForm.Name\">\n              <Form.Label>Nome</Form.Label>\n              <Form.Control\n                name=\"name\"\n                type=\"text\"\n                value={inputs.name}\n                onChange={handleChange}\n                required\n              />\n            </Form.Group>\n            <Form.Group controlId=\"userForm.Phone\">\n              <Form.Label>Telefone</Form.Label>\n              <MaskedFormControl\n                name=\"phone\"\n                type=\"text\"\n                value={inputs.phone}\n                onChange={handleChange}\n                required\n                mask='(11) 11111-1111'\n              />\n            </Form.Group>\n            <Form.Group controlId=\"userForm.BirthDate\">\n              <Form.Label>Data de nascimento</Form.Label>\n              <Form.Control\n                name=\"birth_date\"\n                type=\"date\"\n                value={inputs.birth_date}\n                onChange={handleChange}\n                required\n              />\n            </Form.Group>\n            <Form.Group controlId=\"userForm.Cep\">\n              <Form.Label>Cep</Form.Label>\n              <MaskedFormControl\n                name=\"zip\"\n                type=\"text\"\n                onChange={handleSearchAddress}\n                value={inputs.zip}\n                required\n                mask='11111-111'\n              />\n              <Form.Text className=\"text-muted\">\n                {searchAddressError}\n              </Form.Text>\n            </Form.Group>\n            <Form.Group controlId=\"userForm.Address\">\n              <Form.Label>Endereço</Form.Label>\n              <Form.Control\n                name=\"address\"\n                type=\"text\"\n                value={inputs.address}\n                onChange={handleChange}\n                required\n              />\n            </Form.Group>\n            <Form.Group controlId=\"userForm.Complement\">\n              <Form.Label>Complemento</Form.Label>\n              <Form.Control\n                name=\"complement\"\n                type=\"text\"\n                value={inputs.complement}\n                onChange={handleChange}\n              />\n            </Form.Group>\n            <Form.Group controlId=\"userForm.Neighborhood\">\n              <Form.Label>Bairro</Form.Label>\n              <Form.Control\n                name=\"neighborhood\"\n                type=\"text\"\n                value={inputs.neighborhood}\n                onChange={handleChange}\n                required\n              />\n            </Form.Group>\n            <Form.Group controlId=\"userForm.City\">\n              <Form.Label>Cidade</Form.Label>\n              <Form.Control\n                name=\"city\"\n                type=\"text\"\n                value={inputs.city}\n                onChange={handleChange}\n                required\n              />\n            </Form.Group>\n            <Form.Group controlId=\"userForm.State\">\n              <Form.Label>UF (Estado)</Form.Label>\n              <Form.Control\n                name=\"state\"\n                type=\"text\"\n                value={inputs.state}\n                onChange={handleChange}\n                required\n              />\n            </Form.Group>\n            <button type=\"submit\" className=\"btn btn-primary my-1\">\n              Salvar\n            </button>\n          </Form>\n        </Modal.Body>\n      </Modal>\n\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}